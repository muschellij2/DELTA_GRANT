if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
# packs = c("brainR", "diffr", "freesurfer", "fslr",
#           "kirby21.base", "kirby21.fmri",
#           "kirby21.t1", "matlabr", "neurobase", "neurohcp",
#           "oasis", "papayar", "rscopus", "spm12r", "WhiteStripe")
# from crandb
packs = c("brainR", "cifti", "fedreporter", "freesurfer", "fslr",
"gifti", "kirby21.base", "kirby21.fmri",
"kirby21.t1", "matlabr", "neurobase", "neurohcp", "neurovault",
"papayar", "spm12r", "stapler", "WhiteStripe")
packs = sort(unique(packs))
packs = unique(packs)
dl = cran_downloads( from = first_date, to = today,
packages = packs)
cs = dl %>%
group_by(package) %>%
mutate(count = cumsum(count)) %>%
filter(count > 0)
maxes = dl %>%
group_by(package) %>%
summarize(count = sum(count),
date = max(date))
g =  cs %>%
ggplot(aes(x = date,
y = count,
colour = package)) +
geom_line() +
geom_text_repel(data = maxes, aes(x = date,
y = count,
group = package,
label = package)) +
guides(colour = FALSE)
png("imaging_package_downloads.png",res = 600,
height = 7, width = 14, units = "in")
print(g)
dev.off()
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
# packs = c("brainR", "diffr", "freesurfer", "fslr",
#           "kirby21.base", "kirby21.fmri",
#           "kirby21.t1", "matlabr", "neurobase", "neurohcp",
#           "oasis", "papayar", "rscopus", "spm12r", "WhiteStripe")
# from crandb
packs = c("brainR", "cifti", "fedreporter", "freesurfer", "fslr",
"gifti", "kirby21.base", "kirby21.fmri",
"kirby21.t1", "matlabr", "neurobase", "neurohcp", "neurovault",
"papayar", "spm12r", "stapler", "WhiteStripe")
packs = sort(unique(packs))
packs = unique(packs)
dl = cran_downloads( from = first_date, to = today,
packages = packs)
cs = dl %>%
group_by(package) %>%
mutate(count = cumsum(count)) %>%
filter(count > 0)
maxes = dl %>%
group_by(package) %>%
summarize(count = sum(count),
date = max(date))
g =  cs %>%
ggplot(aes(x = date,
y = count,
colour = package)) +
geom_line() +
geom_text_repel(data = maxes, aes(x = date,
y = count,
group = package,
label = package)) +
guides(colour = FALSE) + theme_bw()
png("imaging_package_downloads.png",res = 600,
height = 7, width = 14, units = "in")
print(g)
dev.off()
library(lubridate)
?as.period
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
library(lubridate)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
# packs = c("brainR", "diffr", "freesurfer", "fslr",
#           "kirby21.base", "kirby21.fmri",
#           "kirby21.t1", "matlabr", "neurobase", "neurohcp",
#           "oasis", "papayar", "rscopus", "spm12r", "WhiteStripe")
# from crandb
packs = c("brainR", "cifti", "fedreporter", "freesurfer", "fslr",
"gifti", "kirby21.base", "kirby21.fmri",
"kirby21.t1", "matlabr", "neurobase", "neurohcp", "neurovault",
"papayar", "spm12r", "stapler", "WhiteStripe")
packs = sort(unique(packs))
packs = unique(packs)
dl = cran_downloads( from = first_date, to = today,
packages = packs)
cs = dl %>%
group_by(package) %>%
mutate(count = cumsum(count)) %>%
filter(count > 0)
maxes = dl %>%
group_by(package) %>%
summarize(count = sum(count),
date = max(date) + as.period(1, unit = "week"))
g =  cs %>%
ggplot(aes(x = date,
y = count,
colour = package)) +
geom_line() +
geom_text_repel(data = maxes, aes(x = date,
y = count,
group = package,
label = package)) +
guides(colour = FALSE) + theme_bw()
png("imaging_package_downloads.png",res = 600,
height = 7, width = 14, units = "in")
print(g)
dev.off()
source('~/Dropbox/Grants/DELTA/download_trajectory.R')
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
library(lubridate)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
# packs = c("brainR", "diffr", "freesurfer", "fslr",
#           "kirby21.base", "kirby21.fmri",
#           "kirby21.t1", "matlabr", "neurobase", "neurohcp",
#           "oasis", "papayar", "rscopus", "spm12r", "WhiteStripe")
# from crandb
packs = c("brainR", "cifti", "fedreporter", "freesurfer", "fslr",
"gifti", "kirby21.base", "kirby21.fmri",
"kirby21.t1", "matlabr", "neurobase", "neurohcp", "neurovault",
"papayar", "spm12r", "stapler", "WhiteStripe")
packs = sort(unique(packs))
packs = unique(packs)
dl = cran_downloads( from = first_date, to = today,
packages = packs)
cs = dl %>%
group_by(package) %>%
mutate(count = cumsum(count)) %>%
filter(count > 0)
maxes = dl %>%
group_by(package) %>%
summarize(count = sum(count),
date = max(date) + as.period(2, unit = "week"))
g =  cs %>%
ggplot(aes(x = date,
y = count,
colour = package)) +
geom_line() +
geom_text(data = maxes, aes(x = date,
y = count,
group = package,
label = package)) +
guides(colour = FALSE) + theme_bw()
png("imaging_package_downloads.png",res = 600,
height = 7, width = 14, units = "in")
print(g)
dev.off()
source('~/Dropbox/Grants/DELTA/download_trajectory.R')
if (!require(cranlogs)) {
library(devtools)
install_github("metacran/cranlogs")
library(cranlogs)
}
library(dplyr)
library(ggplot2)
library(ggrepel)
library(lubridate)
first_date = "2014-01-10"
today = Sys.Date()
long_today = format(Sys.time(), "%B %d, %Y")
# packs = c("brainR", "diffr", "freesurfer", "fslr",
#           "kirby21.base", "kirby21.fmri",
#           "kirby21.t1", "matlabr", "neurobase", "neurohcp",
#           "oasis", "papayar", "rscopus", "spm12r", "WhiteStripe")
# from crandb
packs = c("brainR", "cifti", "fedreporter", "freesurfer", "fslr",
"gifti", "kirby21.base", "kirby21.fmri",
"kirby21.t1", "matlabr", "neurobase", "neurohcp", "neurovault",
"papayar", "spm12r", "stapler", "WhiteStripe")
packs = sort(unique(packs))
packs = unique(packs)
dl = cran_downloads( from = first_date, to = today,
packages = packs)
cs = dl %>%
group_by(package) %>%
mutate(count = cumsum(count)) %>%
filter(count > 0)
maxes = dl %>%
group_by(package) %>%
summarize(count = sum(count),
date = max(date) + as.period(10, unit = "week"))
g =  cs %>%
ggplot(aes(x = date,
y = count,
colour = package)) +
geom_line() +
geom_text(data = maxes, aes(x = date,
y = count,
group = package,
label = package)) +
guides(colour = FALSE) + theme_bw()
png("imaging_package_downloads.png",res = 600,
height = 7, width = 14, units = "in")
print(g)
dev.off()
source('~/Dropbox/Grants/DELTA/download_trajectory.R')
?theme
source('~/Dropbox/Grants/DELTA/download_trajectory.R')
library(dplyr)
library(ggplot2)
df = data_frame(x = rnorm(100)) %>%
mutate(y = 0.2* x + x^2 * 0.5 + rnorm(100))
g = df %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(se = FALSE)
png("quickplot.png")
g
dev.off()
library(dplyr)
library(ggplot2)
df = data_frame(x = rnorm(100)) %>%
mutate(y = 0.2* x + x^2 * 0.5 + rnorm(100))
g = df %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(se = FALSE)
png("quickplot.png", height = 7, width = 14, units = "in")
g
dev.off()
library(dplyr)
library(ggplot2)
df = data_frame(x = rnorm(100)) %>%
mutate(y = 0.2* x + x^2 * 0.5 + rnorm(100))
g = df %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(se = FALSE)
png("quickplot.png", height = 7, width = 14, units = "in", res = 300)
g
dev.off()
setwd("auto/")
library(xml2)
library(magrittr)
library(officer)
x = read_pptx("tmp.pptx")
library(xml2)
library(magrittr)
library(officer)
library(here)
x = read_pptx(file.path(here::here(), "auto", "DELTA.pptx"))
x = read_pptx(file.path(here::here(), "auto", "DELTA2.pptx"))
notes_dir = file.path(x$package_dir, "ppt", "notesSlides")
files = list.files(pattern = ".xml$",
path = notes_dir, full.names = TRUE)
fiels
files
library(xml2)
library(magrittr)
library(officer)
library(here)
x = read_pptx(file.path(here::here(), "auto", "DELTA2.pptx"))
notes_dir = file.path(x$package_dir, "ppt", "notesSlides")
files = list.files(pattern = ".xml$",
path = notes_dir, full.names = TRUE)
get_notes = function(fname) {
xdoc = read_xml(fname)
txt = xdoc %>% xml_find_all("//a:t") %>% xml_text()
txt = paste(txt, collapse = " ")
cat(txt)
return(txt)
})
sapply(files, get_notes)
library(xml2)
library(magrittr)
library(officer)
library(here)
x = read_pptx(file.path(here::here(), "auto", "DELTA2.pptx"))
notes_dir = file.path(x$package_dir, "ppt", "notesSlides")
files = list.files(pattern = ".xml$",
path = notes_dir, full.names = TRUE)
get_notes = function(fname) {
xdoc = read_xml(fname)
txt = xdoc %>% xml_find_all("//a:t") %>% xml_text()
txt = paste(txt, collapse = " ")
cat(txt)
return(txt)
}
sapply(files, get_notes)
library(xml2)
library(magrittr)
library(officer)
library(here)
x = read_pptx(file.path(here::here(), "auto", "DELTA2.pptx"))
notes_dir = file.path(x$package_dir, "ppt", "notesSlides")
files = list.files(pattern = ".xml$",
path = notes_dir, full.names = TRUE)
get_notes = function(fname) {
xdoc = read_xml(fname)
txt = xdoc %>% xml_find_all("//a:t") %>% xml_text()
txt = paste(txt, collapse = " ")
cat(txt)
return(txt)
}
script = sapply(files, get_notes)
writeLines(script, con = "script.txt")
library(ari)
library(aws.polly)
aws.signature::use_credentials(profile = "polly")
files = list.files(pattern = ".png$",
full.names = TRUE)
files
para = readLines("script.txt")
para = para[ !para %in% ""]
para
library(ari)
library(aws.polly)
aws.signature::use_credentials(profile = "polly")
files = list.files(pattern = ".png$",
full.names = TRUE)
para = readLines("script.txt")
para = para[ !para %in% ""]
ari_spin(paragraphs = para,
images = files, output = "joey.mp4",
voice = "Joey")
ari_spin(paragraphs = para,
images = files, output = "kim.mp4",
voice = "Kimberly")
